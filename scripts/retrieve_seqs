#!/usr/bin/env python3
# ejr: 2025-02-20
# retrieve sequences from FASTA File where first parameter is foudn in the header
# Usage: retrieve_seqs <expr> <file>

import sys

##########################################################################################
# main
##########################################################################################
def main():

    if len(sys.argv) != 3:
        print('Usage: retrieve_seqs <text> <file>')
        sys.exit(1)

    fasta_in = read_fasta(sys.argv[2])
    pattern = sys.argv[1]
    fasta_out = retrieve_seqs(fasta_in, pattern)
    write_fasta(fasta_out)

    exit(0)

##########################################################################################
# functions
##########################################################################################
### read in fasta file
def read_fasta(filename):
    fasta_dict = {}
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('>'):
                header = line.strip()
                header = header.replace('>', '')
                # set first word of header as key
                header = header.split()[0]

                fasta_dict[header] = ''
            else:
                fasta_dict[header] += line.strip()

    return fasta_dict

### filter fasta file to only include header in seq_list
def retrieve_seqs(fasta_dict, pattern):
    fasta_out = {}
    for header in fasta_dict:
    # if pattern in header
        if pattern in header:
            fasta_out[header] = fasta_dict[header]
    return fasta_out

### write fasta_dict to stdout
def write_fasta(fasta_dict):
    for header in fasta_dict:
        print('>' + header)
        for i in range(0, len(fasta_dict[header]), 80):
            print(fasta_dict[header][i:i+80])

##########################################################################################
# call main
##########################################################################################
if __name__ == '__main__':
    main()